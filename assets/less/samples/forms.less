//
// Forms
// --------------------------------------------------
// 
// Test using mixins from /base/mixins/forms/*.less
// 

//** Large `.form-control` height
@input-height-large:             (ceil(@font-size-base * @line-height-base) + (@padding-base-vertical * 2) + 2);
//** Small `.form-control` height
@input-height-small:             (floor(@font-size-base * @line-height-base) + (@padding-base-vertical * 2) + 2);

// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control()` to any
// of the following form controls:
//
// select
// textarea
// input[type="text"]
// input[type="password"]
// input[type="datetime"]
// input[type="datetime-local"]
// input[type="date"]
// input[type="month"]
// input[type="time"]
// input[type="week"]
// input[type="number"]
// input[type="email"]
// input[type="url"]
// input[type="search"]
// input[type="tel"]
// input[type="color"]
.form-control {
  .form-control(@gray, #fff, #ccc);
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.
.form-group {
  .form-group();
}

// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.
.radio {
  .radio();
}
.checkbox {
  .checkbox();
}

// Radios and checkboxes on same line
.radio-inline {
  .radio-inline();
}
.checkbox-inline {
  .checkbox-inline();
}

// Static form control text
//
// Apply class to a `p` element to make any string of text align with labels in
// a horizontal form layout.
.form-control-static {
  .form-control-static();
}

// Form control sizing
//
// Apply `.input-size()` next to `.form-control()` with predefined variables or 
// any desired values.
.form-control-small {
  .form-control();
  //.input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small);
}

// Form control sizing
//
// Apply `.form-group-size()` next to `.form-group()` with predefined variables or 
// any desired values. 
// Set different class names for `.form-control` and `.form-control-static` in the
// two last arguments.
.form-group-small {
  .form-group();
  //.form-group-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small; form-control; form-control-static);
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
  .help-block();
}

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
// Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

.form-inline {
  .form-inline();
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.
// 
// FIXME!
// - change class names in mixin
// - add handle for sizing 

.form-horizontal {
  .form-horizontal();
  .control-label {
    .make-sm-column(4);
  }
  .form-control {
    .make-sm-column(8);
  }
}


// Form control feedback states
//
// Apply contextual and semantic states to individual form controls.
// 
// FIXME!
// - complete mixin
// - add handle for sizing
// 
.input-lg + .form-control-feedback,
.input-group-lg + .form-control-feedback,
.form-group-lg .form-control + .form-control-feedback {
  width: @input-height-large;
  height: @input-height-large;
  line-height: @input-height-large;
}
.input-sm + .form-control-feedback,
.input-group-sm + .form-control-feedback,
.form-group-sm .form-control + .form-control-feedback {
  width: @input-height-small;
  height: @input-height-small;
  line-height: @input-height-small;
}


//
// Input groups
// --------------------------------------------------

// Sizing options
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg > .form-control,
.input-group-lg > .input-group-addon,
.input-group-lg > .input-group-btn > .btn {
  //.input-lg();
}
.input-group-sm > .form-control,
.input-group-sm > .input-group-addon,
.input-group-sm > .input-group-btn > .btn {
  //.input-sm();
}


// Feedback states
.has-success() {
  .form-control-validation(@state-success-text; @state-success-text; @state-success-bg);
}
.has-warning() {
  .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
}
.has-error() {
  .form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);
}
